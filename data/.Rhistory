RETURNS: (,named list) Subset of input data (source) filtered by continent
(source, data.frame) input owid-covid data.frame
(loc, string), continent name
"
myLocations <- unique(source$continent)
loc <- tolower(loc) #convert location to lowercase for ease of use
if (is.na(match(loc, tolower(myLocations))) == FALSE){
subset(source, tolower(continent) == loc)
}
else {
stop("Continent is not a valid location")
}
}
myTimeseries <- function(source, var, start, stop) {
"
RETURNS: (,ts) Time series data of source$var from start:stop
(source, named list) input OWID covid data frame ideally input from myCountry or myContinent
(var, string) variable to create time series of
(start, date) ymd('YYYY-MM-DD)' lubridate object for starting point of time series
(stop, date) ymd('YYYY-MM-DD') lubrdiate object for stopping point of time series
"
myStart = date.day(start)
myEnd = date.day(stop)
ts(subset(source[var], source$date <= stop & source$date >= start),
start=myStart,
end=myEnd)
}
myForecast <- function(source, type, predInt, confLevels) {
"
RETURNS: ( ,named list) time series forecast on a dataset using (type) forecasting method
(source, ts) times series object to compute forecast values
(type, char) forecasting method as a string
(predInt, integer) days to forecast from end of time series
(confLevels, numeric vector) vector specifying confidence intervals as percentage
"
#available forecasting models -- will add more in future!
myTypes <- c("arima","tbats","ets")
myFuns <-  c("auto.arima","tbats","ets")
type <- tolower(type) #convert type to lowercase for ease of use
#if conf intervals not specified, default to 95% and 80%
if(missing(confLevels)) {
confLevels = c(80,95)
print("Using default 95% and 80% confidence intervals")
} else {
confLevels = confLevels
}
#perform forecasting type if available in myTypes
if (is.na(match(type, myTypes)) == FALSE ){
funIndex <- match(type, myTypes)
myFitfunction <- get(myFuns[funIndex])
#output:
forecast(myFitfunction(source), h=predInt, level=confLevels)
}
else{
stop("Forecast type is not available")
}
}
# LOAD DATA -----------------------------------------------------------
## **Downloading Data ===========================================================
#download most recent owid-covid data - can also do this with bash script
myDir <- "~/Documents/projects/covid/owid_data"
myFilename <- "owid-covid.csv"
# download.owid(myDir, myFilename)
## **Read CSV ============================================
dataIn <- read.csv("~/Documents/projects/covid/owid_data/owid-covid.csv", header=TRUE)
# DATA -----------------------------------------------------------
## **Country Data ===========================================================
#load data and create subset data.frame of data for a country
loc <- "United States"         #Eventually add ability to choose from unique(covid$location).
covid <- myCountry(dataIn, loc)
## **Time Series ===========================================================
#create subsets of time series data
jan1 <- ymd("2020-01-01")     #Jan 1
recent <- max(covid$date)      #Most recent day from owid-covid data
start1 <- ymd("2020-05-05")
end1 <- ymd("2020-06-16")
ts.start <- jan1
ts.end <- recent
#TODO: add ts.start, ts.end as selectable fields (ideally from calendar or drop down in Shiny)
#create time series of new_cases from ts.start to ts.end days.
data <- myTimeseries(covid, "new_cases", ts.start, ts.end)
#create time series from jan1 to plot points
data0 <- myTimeseries(covid, "new_cases", jan1, recent)
#corresponding day of year for start of each month in 2020.
month.days = c(001,032,061,092,122,153,183,214,245,275,306,336)
month.names = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
# FORECASTING -----------------------------------------------------------
pred.int = 30 #used for drawing plot windows and vertical lines
fore.type = "tbats"
Fcast <- myForecast(source=data, type=fore.type, predInt=pred.int, confLevels=c(80,95))
# PLOT -----------------------------------------------------------
out.dir <- "~/Documents/projects/covid/figures/"
out.fname <- paste(loc, fore.type, pred.int, ts.start, ts.end, sep="-")
out.ftype <- "png"
out.final<- paste(out.dir, out.fname,".", out.ftype, sep="")
get(out.ftype)(out.final, width=600, height=600)
## **Forecast Plot ===========================================================
par(bg="white")
plotTitle <- paste(loc, pred.int, toupper(fore.type),"Day Forecast", sep=" ")
plot(Fcast,
main=plotTitle,
sub="(data: Our World in Data Coronavirus Source Data)",
#     xlab="Time",
ylab="Daily new cases",
xlim=c(date.day(ts.start), date.day(ts.end) + pred.int),
shadecols = c("grey80", "grey70"), #color conf int.
xaxt='n', #hide x axis to label with months
#     yaxt='n', #hide y axis to label with thousands
fcol='black', #prediction line color
flty=2,
type="p",
col=NA, #hide points
showgap=FALSE)
axis(1, labels=month.names,at=month.days) #create axis with months.
#axis(2, labels=c(0,10,20,30,40,50,60,70,80,90,100),
#     at=c(0,10e3,20e3,30e3,40e3,50e3,60e3,70e3,80e3,90e3,100e3))
## Vertical Lines  ===========================================================
#vertical line end of prediction interval
abline(v=date.day(ts.end) + pred.int ,col='grey50',lty=2)
#vertical lines to mark forecast range
abline(v=date.day(ts.start),col='red',lty=2)
abline(v=date.day(ts.end),col='red',lty=2)
abline(0,0)
## **Points ===========================================================
#plot all new cases/days points color coded by height for reference
grPal <- colorRampPalette(c('green','red'))
myColors <- grPal(10)[as.numeric(cut(data0,breaks = 10))]
points(data0,col=myColors,pch=19)
## **Moving Average ===========================================================
#calculate and plot moving average smoothed over moav_length.
moav_length= 2 #days. choose 7 or 14 to smooth over weekly fluctuations
moav <- ma(data0, order=moav_length)
lines(moav,col='black',lwd=2) #plot moving average
## **Legend ===========================================================
legend(date.day(ts.start) + 1, par("usr")[4] - par("usr")[4]*0.02, #plot in top left corner
legend=c("Moving Average","Forecast",'95% Confidence',"80% Confidence"),
col=c("black",'black','grey80','grey70'),
lty=c(1,2,1,1),lwd=c(2,2,8,8))
## **Save Figure  ===========================================================
dev.off() #turn off X11 device
# PLOT -----------------------------------------------------------
out.dir <- "~/Documents/projects/covid/figures/"
out.fname <- paste(loc, fore.type, pred.int, ts.start, ts.end, sep="-")
out.ftype <- "png"
out.final<- paste(out.dir, out.fname,".", out.ftype, sep="")
get(out.ftype)(out.final, width=640, height=640)
## **Forecast Plot ===========================================================
par(bg="white")
plotTitle <- paste(loc, pred.int, toupper(fore.type),"Day Forecast", sep=" ")
plot(Fcast,
main=plotTitle,
sub="(data: Our World in Data Coronavirus Source Data)",
#     xlab="Time",
ylab="Daily new cases",
xlim=c(date.day(ts.start), date.day(ts.end) + pred.int),
shadecols = c("grey80", "grey70"), #color conf int.
xaxt='n', #hide x axis to label with months
#     yaxt='n', #hide y axis to label with thousands
fcol='black', #prediction line color
flty=2,
type="p",
col=NA, #hide points
showgap=FALSE)
axis(1, labels=month.names,at=month.days) #create axis with months.
#axis(2, labels=c(0,10,20,30,40,50,60,70,80,90,100),
#     at=c(0,10e3,20e3,30e3,40e3,50e3,60e3,70e3,80e3,90e3,100e3))
## Vertical Lines  ===========================================================
#vertical line end of prediction interval
abline(v=date.day(ts.end) + pred.int ,col='grey50',lty=2)
#vertical lines to mark forecast range
abline(v=date.day(ts.start),col='red',lty=2)
abline(v=date.day(ts.end),col='red',lty=2)
abline(0,0)
## **Points ===========================================================
#plot all new cases/days points color coded by height for reference
grPal <- colorRampPalette(c('green','red'))
myColors <- grPal(10)[as.numeric(cut(data0,breaks = 10))]
points(data0,col=myColors,pch=19)
## **Moving Average ===========================================================
#calculate and plot moving average smoothed over moav_length.
moav_length= 2 #days. choose 7 or 14 to smooth over weekly fluctuations
moav <- ma(data0, order=moav_length)
lines(moav,col='black',lwd=2) #plot moving average
## **Legend ===========================================================
legend(date.day(ts.start) + 1, par("usr")[4] - par("usr")[4]*0.02, #plot in top left corner
legend=c("Moving Average","Forecast",'95% Confidence',"80% Confidence"),
col=c("black",'black','grey80','grey70'),
lty=c(1,2,1,1),lwd=c(2,2,8,8))
## **Save Figure  ===========================================================
dev.off() #turn off X11 device
# PLOT -----------------------------------------------------------
out.dir <- "~/Documents/projects/covid/figures/"
out.fname <- paste(loc, fore.type, pred.int, ts.start, ts.end, sep="-")
out.ftype <- "png"
out.final<- paste(out.dir, out.fname,".", out.ftype, sep="")
get(out.ftype)(out.final, width=780, height=780)
## **Forecast Plot ===========================================================
par(bg="white")
plotTitle <- paste(loc, pred.int, toupper(fore.type),"Day Forecast", sep=" ")
plot(Fcast,
main=plotTitle,
sub="(data: Our World in Data Coronavirus Source Data)",
#     xlab="Time",
ylab="Daily new cases",
xlim=c(date.day(ts.start), date.day(ts.end) + pred.int),
shadecols = c("grey80", "grey70"), #color conf int.
xaxt='n', #hide x axis to label with months
#     yaxt='n', #hide y axis to label with thousands
fcol='black', #prediction line color
flty=2,
type="p",
col=NA, #hide points
showgap=FALSE)
axis(1, labels=month.names,at=month.days) #create axis with months.
#axis(2, labels=c(0,10,20,30,40,50,60,70,80,90,100),
#     at=c(0,10e3,20e3,30e3,40e3,50e3,60e3,70e3,80e3,90e3,100e3))
## Vertical Lines  ===========================================================
#vertical line end of prediction interval
abline(v=date.day(ts.end) + pred.int ,col='grey50',lty=2)
#vertical lines to mark forecast range
abline(v=date.day(ts.start),col='red',lty=2)
abline(v=date.day(ts.end),col='red',lty=2)
abline(0,0)
## **Points ===========================================================
#plot all new cases/days points color coded by height for reference
grPal <- colorRampPalette(c('green','red'))
myColors <- grPal(10)[as.numeric(cut(data0,breaks = 10))]
points(data0,col=myColors,pch=19)
## **Moving Average ===========================================================
#calculate and plot moving average smoothed over moav_length.
moav_length= 2 #days. choose 7 or 14 to smooth over weekly fluctuations
moav <- ma(data0, order=moav_length)
lines(moav,col='black',lwd=2) #plot moving average
## **Legend ===========================================================
legend(date.day(ts.start) + 1, par("usr")[4] - par("usr")[4]*0.02, #plot in top left corner
legend=c("Moving Average","Forecast",'95% Confidence',"80% Confidence"),
col=c("black",'black','grey80','grey70'),
lty=c(1,2,1,1),lwd=c(2,2,8,8))
## **Save Figure  ===========================================================
dev.off() #turn off X11 device
## **Forecast Plot ===========================================================
par(bg="white")
plotTitle <- paste(loc, pred.int, toupper(fore.type),"Day Forecast", sep=" ")
plot(Fcast,
main=plotTitle,
sub="(data: Our World in Data Coronavirus Source Data)",
#     xlab="Time",
ylab="Daily new cases",
xlim=c(date.day(ts.start), date.day(ts.end) + pred.int),
shadecols = c("grey80", "grey70"), #color conf int.
xaxt='n', #hide x axis to label with months
#     yaxt='n', #hide y axis to label with thousands
fcol='black', #prediction line color
flty=2,
type="p",
col=NA, #hide points
showgap=FALSE)
axis(1, labels=month.names,at=month.days) #create axis with months.
#axis(2, labels=c(0,10,20,30,40,50,60,70,80,90,100),
#     at=c(0,10e3,20e3,30e3,40e3,50e3,60e3,70e3,80e3,90e3,100e3))
## Vertical Lines  ===========================================================
#vertical line end of prediction interval
abline(v=date.day(ts.end) + pred.int ,col='grey50',lty=2)
#vertical lines to mark forecast range
abline(v=date.day(ts.start),col='red',lty=2)
abline(v=date.day(ts.end),col='red',lty=2)
abline(0,0)
## **Points ===========================================================
#plot all new cases/days points color coded by height for reference
grPal <- colorRampPalette(c('green','red'))
myColors <- grPal(10)[as.numeric(cut(data0,breaks = 10))]
points(data0,col=myColors,pch=19)
## **Moving Average ===========================================================
#calculate and plot moving average smoothed over moav_length.
moav_length= 2 #days. choose 7 or 14 to smooth over weekly fluctuations
moav <- ma(data0, order=moav_length)
lines(moav,col='black',lwd=2) #plot moving average
## **Legend ===========================================================
legend(date.day(ts.start) + 1, par("usr")[4] - par("usr")[4]*0.02, #plot in top left corner
legend=c("Moving Average","Forecast",'95% Confidence',"80% Confidence"),
col=c("black",'black','grey80','grey70'),
lty=c(1,2,1,1),lwd=c(2,2,8,8))
# PLOT -----------------------------------------------------------
out.dir <- "~/Documents/projects/covid/figures/"
out.fname <- paste(loc, fore.type, pred.int, ts.start, ts.end, sep="-")
out.ftype <- "png"
out.final<- paste(out.dir, out.fname,".", out.ftype, sep="")
get(out.ftype)(out.final, width=780, height=780)
## **Forecast Plot ===========================================================
par(bg="white")
plotTitle <- paste(loc, pred.int, toupper(fore.type),"Day Forecast", sep=" ")
plot(Fcast,
main=plotTitle,
sub="(data: Our World in Data Coronavirus Source Data)",
#     xlab="Time",
ylab="Daily new cases",
xlim=c(date.day(ts.start), date.day(ts.end) + pred.int),
shadecols = c("grey80", "grey70"), #color conf int.
xaxt='n', #hide x axis to label with months
#     yaxt='n', #hide y axis to label with thousands
fcol='black', #prediction line color
flty=2,
type="p",
col=NA, #hide points
showgap=FALSE)
axis(1, labels=month.names,at=month.days) #create axis with months.
#axis(2, labels=c(0,10,20,30,40,50,60,70,80,90,100),
#     at=c(0,10e3,20e3,30e3,40e3,50e3,60e3,70e3,80e3,90e3,100e3))
## Vertical Lines  ===========================================================
#vertical line end of prediction interval
abline(v=date.day(ts.end) + pred.int ,col='grey50',lty=2)
#vertical lines to mark forecast range
abline(v=date.day(ts.start),col='red',lty=2)
abline(v=date.day(ts.end),col='red',lty=2)
abline(0,0)
## **Points ===========================================================
#plot all new cases/days points color coded by height for reference
grPal <- colorRampPalette(c('green','red'))
myColors <- grPal(10)[as.numeric(cut(data0,breaks = 10))]
points(data0,col=myColors,pch=19)
## **Moving Average ===========================================================
#calculate and plot moving average smoothed over moav_length.
moav_length= 2 #days. choose 7 or 14 to smooth over weekly fluctuations
moav <- ma(data0, order=moav_length)
lines(moav,col='black',lwd=2) #plot moving average
## **Legend ===========================================================
legend(date.day(ts.start) + 1, par("usr")[4] - par("usr")[4]*0.02, #plot in top left corner
legend=c("Moving Average","Forecast",'95% Confidence',"80% Confidence"),
col=c("black",'black','grey80','grey70'),
lty=c(1,2,1,1),lwd=c(2,2,8,8))
## **Save Figure  ===========================================================
dev.off()
# PACKAGES -----------------------------------------------------------
library(forecast) #moving average, forecasting
library(lubridate) #working with dates
# FUNCTIONS -----------------------------------------------------------
download.owid <- function(download.dir, file.name) {
"
RETURNS: () downloads most recent OWID COVID19
(download.dir, string) Directory to download OWID COVID19 data
(file.name, string) Desired file name
"
owid.url <- "https://covid.ourworldindata.org/data/owid-covid-data.csv"
setwd(download.dir)
download.file(owid.url, file.name)
}
date.day <- function(date) {
"
RETURNS: (,integer) integer day of year from corresponding to date (i.e December 31, 2020 = 366)
(date, date) lubridate ymd('YYYY-MM-DD') object
"
as.integer(strftime(date, format="%j"))
}
myCountry <- function(source, loc) {
"
RETURNS: (,named list) Subset of input data (source) filtered by location
(source, data.frame) input owid-covid data.frame
(loc, string), country name/location
"
myLocations <- unique(source$location)
loc <- tolower(loc) #convert location to lowercase for ease of use
if (is.na(match(loc, tolower(myLocations))) == FALSE){
subset(source, tolower(location) == loc)
}
else {
stop("Location is not a valid location")
}
}
myContinent <- function(source, loc) {
#TODO: aggregate values for each data for each country
"
RETURNS: (,named list) Subset of input data (source) filtered by continent
(source, data.frame) input owid-covid data.frame
(loc, string), continent name
"
myLocations <- unique(source$continent)
loc <- tolower(loc) #convert location to lowercase for ease of use
if (is.na(match(loc, tolower(myLocations))) == FALSE){
subset(source, tolower(continent) == loc)
}
else {
stop("Continent is not a valid location")
}
}
myTimeseries <- function(source, var, start, stop) {
"
RETURNS: (,ts) Time series data of source$var from start:stop
(source, named list) input OWID covid data frame ideally input from myCountry or myContinent
(var, string) variable to create time series of
(start, date) ymd('YYYY-MM-DD)' lubridate object for starting point of time series
(stop, date) ymd('YYYY-MM-DD') lubrdiate object for stopping point of time series
"
myStart = date.day(start)
myEnd = date.day(stop)
ts(subset(source[var], source$date <= stop & source$date >= start),
start=myStart,
end=myEnd)
}
myForecast <- function(source, type, predInt, confLevels) {
"
RETURNS: ( ,named list) time series forecast on a dataset using (type) forecasting method
(source, ts) times series object to compute forecast values
(type, char) forecasting method as a string
(predInt, integer) days to forecast from end of time series
(confLevels, numeric vector) vector specifying confidence intervals as percentage
"
#available forecasting models -- will add more in future!
myTypes <- c("arima","tbats","ets")
myFuns <-  c("auto.arima","tbats","ets")
type <- tolower(type) #convert type to lowercase for ease of use
#if conf intervals not specified, default to 95% and 80%
if(missing(confLevels)) {
confLevels = c(80,95)
print("Using default 95% and 80% confidence intervals")
} else {
confLevels = confLevels
}
#perform forecasting type if available in myTypes
if (is.na(match(type, myTypes)) == FALSE ){
funIndex <- match(type, myTypes)
myFitfunction <- get(myFuns[funIndex])
#output:
forecast(myFitfunction(source), h=predInt, level=confLevels)
}
else{
stop("Forecast type is not available")
}
}
# LOAD DATA -----------------------------------------------------------
## **Downloading Data ===========================================================
#download most recent owid-covid data - can also do this with bash script
myDir <- "~/Documents/projects/covid/owid_data"
myFilename <- "owid-covid.csv"
# download.owid(myDir, myFilename)
## **Read CSV ============================================
dataIn <- read.csv("~/Documents/projects/covid/owid_data/owid-covid.csv", header=TRUE)
# DATA -----------------------------------------------------------
## **Country Data ===========================================================
#load data and create subset data.frame of data for a country
loc <- "United States"         #Eventually add ability to choose from unique(covid$location).
covid <- myCountry(dataIn, loc)
## **Time Series ===========================================================
#create subsets of time series data
jan1 <- ymd("2020-01-01")     #Jan 1
recent <- max(covid$date)      #Most recent day from owid-covid data
start1 <- ymd("2020-05-05")
end1 <- ymd("2020-06-16")
ts.start <- jan1
ts.end <- recent
#TODO: add ts.start, ts.end as selectable fields (ideally from calendar or drop down in Shiny)
#create time series of new_cases from ts.start to ts.end days.
data <- myTimeseries(covid, "new_cases", ts.start, ts.end)
#create time series from jan1 to plot points
data0 <- myTimeseries(covid, "new_cases", jan1, recent)
#corresponding day of year for start of each month in 2020.
month.days = c(001,032,061,092,122,153,183,214,245,275,306,336)
month.names = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
# FORECASTING -----------------------------------------------------------
pred.int = 30 #used for drawing plot windows and vertical lines
fore.type = "tbats"
Fcast <- myForecast(source=data, type=fore.type, predInt=pred.int, confLevels=c(80,95))
# PLOT -----------------------------------------------------------
#
# out.dir <- "~/Documents/projects/covid/figures/"
# out.fname <- paste(loc, fore.type, pred.int, ts.start, ts.end, sep="-")
# out.ftype <- "png"
# out.final<- paste(out.dir, out.fname,".", out.ftype, sep="")
# get(out.ftype)(out.final, width=780, height=780)
## **Forecast Plot ===========================================================
par(bg="white")
plotTitle <- paste(loc, pred.int, toupper(fore.type),"Day Forecast", sep=" ")
plot(Fcast,
main=plotTitle,
sub="(data: Our World in Data Coronavirus Source Data)",
#     xlab="Time",
ylab="Daily new cases",
xlim=c(date.day(ts.start), date.day(ts.end) + pred.int),
shadecols = c("grey80", "grey70"), #color conf int.
xaxt='n', #hide x axis to label with months
#     yaxt='n', #hide y axis to label with thousands
fcol='black', #prediction line color
flty=2,
type="p",
col=NA, #hide points
showgap=FALSE)
axis(1, labels=month.names,at=month.days) #create axis with months.
#axis(2, labels=c(0,10,20,30,40,50,60,70,80,90,100),
#     at=c(0,10e3,20e3,30e3,40e3,50e3,60e3,70e3,80e3,90e3,100e3))
## Vertical Lines  ===========================================================
#vertical line end of prediction interval
abline(v=date.day(ts.end) + pred.int ,col='grey50',lty=2)
#vertical lines to mark forecast range
abline(v=date.day(ts.start),col='red',lty=2)
abline(v=date.day(ts.end),col='red',lty=2)
abline(0,0)
## **Points ===========================================================
#plot all new cases/days points color coded by height for reference
grPal <- colorRampPalette(c('green','red'))
myColors <- grPal(10)[as.numeric(cut(data0,breaks = 10))]
points(data0,col=myColors,pch=19)
## **Moving Average ===========================================================
#calculate and plot moving average smoothed over moav_length.
moav_length= 2 #days. choose 7 or 14 to smooth over weekly fluctuations
moav <- ma(data0, order=moav_length)
lines(moav,col='black',lwd=2) #plot moving average
## **Legend ===========================================================
legend(date.day(ts.start) + 1, par("usr")[4] - par("usr")[4]*0.02, #plot in top left corner
legend=c("Moving Average","Forecast",'95% Confidence',"80% Confidence"),
col=c("black",'black','grey80','grey70'),
lty=c(1,2,1,1),lwd=c(2,2,8,8))
## **Save Figure  ===========================================================
# dev.off()
